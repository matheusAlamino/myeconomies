// This is your Prisma schema file, // learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  accounts   Account[]
  wallets    Wallet[]
  categories Category[]
  boxes      Box[]
  createdAt  DateTime?  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime?  @updatedAt @db.Timestamptz(6)
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  incomes     Income[]
  expenses    Expense[]
  boxes       Box[]
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Account {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  wallets   Wallet[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id        Int       @id @default(autoincrement())
  name      String
  amount    Float
  accountId Int
  account   Account   @relation(fields: [accountId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  incomes   Income[]
  expenses  Expense[]
  boxes     Box[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Income {
  id            Int      @id @default(autoincrement())
  name          String
  amount        Float
  effectiveDate DateTime
  categoryId    Int
  category      Category @relation(fields: [categoryId], references: [id])
  walletId      Int
  wallet        Wallet   @relation(fields: [walletId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Expense {
  id            Int      @id @default(autoincrement())
  name          String
  amount        Float
  effectiveDate DateTime
  categoryId    Int
  category      Category @relation(fields: [categoryId], references: [id])
  walletId      Int
  wallet        Wallet   @relation(fields: [walletId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Box {
  id           Int           @id @default(autoincrement())
  name         String
  amount       Float
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  categoryId   Int
  category     Category      @relation(fields: [categoryId], references: [id])
  walletId     Int
  wallet       Wallet        @relation(fields: [walletId], references: [id])
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Transaction {
  id              Int      @id @default(autoincrement())
  name            String
  amount          Float
  effectiveDate   DateTime
  operationType   Int
  boxAmountBefore Float
  boxAmountAfter  Float
  boxId           Int
  box             Box      @relation(fields: [boxId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
